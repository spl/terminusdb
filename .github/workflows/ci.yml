name: CI

on:
  push:
  pull_request:
  workflow_dispatch:

env:
  BUILDER_IMAGE: ghcr.io/spl/terminusdb-builder:v1
  LAST_RELEASED_VERSION: 10.0.25
  CURRENT_REPO_VERSION: 10.0.26

jobs:

  is_duplicate_run:
    name: Duplicate run?
    runs-on: ubuntu-latest

    outputs:
      duplicate_run: ${{ steps.check_skip.outputs.should_skip }}

    steps:
      - uses: fkirc/skip-duplicate-actions@master
        id: check_skip
        with:
          # Skip a concurrent run triggered by a pull_request event if there is
          # already a run triggered by a push event.
          concurrent_skipping: same_content_newer
          # Cancel runs from outdated commits.
          cancel_others: 'true'
          # Do not skip push events. They are used by the push_docker job.
          do_not_skip: '["push", "workflow_dispatch", "schedule"]'

  is_build_required:
    name: Build required?
    runs-on: ubuntu-latest

    outputs:
      build_required: ${{ steps.filter.outputs.change_other_than_docs_alone }}
      push_docker_required: >-
        ${{
          github.repository == 'terminusdb/terminusdb' &&
          github.event_name == 'push' && (
            github.ref == 'refs/heads/main' ||
            startsWith(github.ref, 'refs/tags/v')
          )
        }}

    steps:
      - uses: actions/checkout@v2

      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            change_other_than_docs_alone:
              - '!(**.md|docs/**|LICENSE)'

  versions:
    name: Versions
    runs-on: ubuntu-latest
    needs:
      - is_duplicate_run
      - is_build_required
    # Build if we need to push a Docker image or there is no duplicate run in
    # progress and a build is required due to changed files.
    if: |
      needs.is_build_required.outputs.push_docker_required == 'true' || (
        needs.is_duplicate_run.outputs.duplicate_run == 'false' &&
        needs.is_build_required.outputs.build_required == 'true'
      )

    steps:
      - uses: actions/checkout@v2

      - name: Run Cog to update versions in files
        run: |
          docker run \
            --volume $(pwd):/app/terminusdb \
            ${BUILDER_IMAGE} \
            cog -r \
              -D LAST_RELEASED_VERSION=$LAST_RELEASED_VERSION \
              -D CURRENT_REPO_VERSION=$CURRENT_REPO_VERSION \
              docs/release-steps.md \
              src/config/terminus_config.pl

      - name: Commit changes
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: Update versions
          file_pattern: >-
            docs/release-steps.md
            src/config/terminus_config.pl

  build:
    name: Build
    needs: versions
    uses: ./.github/workflows/build.yml

  check:
    name: Check
    needs: build
    uses: ./.github/workflows/check.yml
    with:
      test_repository: ${{ github.repository }}
      test_ref: ${{ github.sha }}
      builder_image: ${{ env.BUILDER_IMAGE }}

  benchmark:
    name: Benchmark
    needs: build
    uses: ./.github/workflows/benchmark.yml

  docs:
    name: Update docs
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v2

      - name: Download Docker image
        uses: actions/download-artifact@v2
        with:
          name: terminusdb-server-docker-image

      - name: Generate man page
        run: |
          sudo apt-get install --no-install-recommends ronn
          ronn --version
          docker load < terminusdb-server-docker-image.tar.gz
          HELP="$(docker run --rm --volume $(pwd)/docs:/app/terminusdb/docs terminusdb/terminusdb-server:local /app/terminusdb/terminusdb help -m)" envsubst < docs/terminusdb.1.ronn.template > docs/terminusdb.1.ronn
          ronn --roff docs/terminusdb.1.ronn

      - name: Commit changes
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: Update man page
          file_pattern: docs/terminusdb.1.*

  # This is required for status checks.
  all_checks_pass_with_build:
    name: All checks pass
    runs-on: ubuntu-latest
    needs: check
    steps:
      - run: echo "Celebrate! ðŸ¥³"

  # This is required for status checks.
  all_checks_pass_without_build:
    name: All checks pass
    runs-on: ubuntu-latest
    needs: is_build_required
    if: >
      needs.is_build_required.outputs.build_required == 'false' &&
      needs.is_build_required.outputs.push_docker_required == 'false'
    steps:
      - run: echo "Nothing to be done. ðŸ˜Œ"

  push_docker:
    name: Push Docker image
    runs-on: ubuntu-latest
    needs:
      - is_build_required
      - all_checks_pass_with_build
    if: needs.is_build_required.outputs.push_docker_required == 'true'

    steps:
      - name: Download Docker image
        uses: actions/download-artifact@v2
        with:
          name: terminusdb-server-docker-image

      - name: Push image to Docker Container Registry
        run: |
          echo '${{ secrets.DOCKER_PASS }}' | docker login -u terminusdb --password-stdin

          # Strip git ref prefix from version
          VERSION=$(echo "$GITHUB_REF" | sed -e 's,.*/\(.*\),\1,')

          # Use Docker `dev` tag convention for main branch
          [ "$VERSION" == "main" ] && VERSION=dev

          docker load < terminusdb-server-docker-image.tar.gz

          # Image identifiers
          LOCAL_IMAGE=terminusdb/terminusdb-server:local
          VERSION_IMAGE=terminusdb/terminusdb-server:$VERSION
          DEV_COMMIT_IMAGE=terminusdb/terminusdb-server:$VERSION-$GITHUB_SHA
          LATEST_IMAGE=terminusdb/terminusdb-server:latest

          # Tag and push the version image
          docker tag $LOCAL_IMAGE $VERSION_IMAGE
          docker push $VERSION_IMAGE

          # Tag and push the dev-commit image. This is removed later.
          if [ "$VERSION" == "dev" ]; then
            docker tag $LOCAL_IMAGE $DEV_COMMIT_IMAGE
            docker push $DEV_COMMIT_IMAGE
          fi

          # Tag and push the latest image when a version tag is pushed
          if [ $(echo "$GITHUB_REF" | grep "refs/tags/v") ]; then
             docker tag $LOCAL_IMAGE $LATEST_IMAGE
             docker push $LATEST_IMAGE
          fi

  trigger_enterprise_build:
    name: Trigger enterprise build
    runs-on: ubuntu-latest
    needs: push_docker
    if: |
      github.repository == 'terminusdb/terminusdb' &&
      github.event_name == 'push' &&
      github.ref == 'refs/heads/main'

    steps:
      - name: Run
        run: |
          curl https://api.github.com/repos/${{ secrets.ENTERPRISE_REPO_OWNER }}/${{ secrets.ENTERPRISE_REPO }}/dispatches \
            -X POST \
            -H 'Accept: application/vnd.github.everest-preview+json' \
            -u rrooij:${{ secrets.PAT }} -d '{ "event_type": "Trigger from community", "client_payload": {"commit": "${{ github.sha }}" } }'
