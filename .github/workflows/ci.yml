name: CI

on:
  push:
    branches:
    tags:
  pull_request:
    # Don't run if only the docs are changed.
    paths-ignore:
      - 'docs/**'
  workflow_dispatch:

env:
  TERMINUSDB_STORE_PROLOG_VERSION: v0.19.2
  TUS_VERSION: v0.0.5
  DOCKER_IMAGE_NAME: terminusdb/terminusdb-server

jobs:

  # Check if this job is already running with the same or newer content.
  #
  # This should never skip push events: they are used by begin_deploy.
  check_skip:
    runs-on: ubuntu-latest

    outputs:
      should_skip: ${{ steps.check_skip.outputs.should_skip }}

    steps:
      - uses: fkirc/skip-duplicate-actions@master
        id: check_skip
        with:
          concurrent_skipping: same_content_newer
          do_not_skip: '["push", "workflow_dispatch", "schedule"]'

  # Build the Docker image.
  build_docker:
    runs-on: ubuntu-latest

    # Check if this job needs to run. We skip a pull_request after a push.
    needs: check_skip
    if: needs.check_skip.outputs.should_skip != 'true'

    steps:
      - uses: actions/checkout@v2

      - name: Build Docker image
        run: |
          docker build . --file Dockerfile --tag $DOCKER_IMAGE_NAME:local
          docker save $DOCKER_IMAGE_NAME:local | gzip > terminusdb-server-docker-image.tar.gz

      - name: Upload Docker image
        uses: actions/upload-artifact@v2
        with:
            name: terminusdb-server-docker-image
            path: terminusdb-server-docker-image.tar.gz

  # Unit tests
  unit_tests:
    runs-on: ubuntu-latest
    needs: build_docker

    steps:
      - name: Download Docker image
        uses: actions/download-artifact@v2
        with:
          name: terminusdb-server-docker-image

      - name: Run unit tests
        run: |
          docker load < terminusdb-server-docker-image.tar.gz
          docker run --name terminusdb $DOCKER_IMAGE_NAME:local /app/terminusdb/terminusdb test

  # Integration tests
  integration_tests:
    runs-on: ubuntu-latest
    needs: build_docker

    steps:
      - name: Download Docker image
        uses: actions/download-artifact@v2
        with:
          name: terminusdb-server-docker-image

      - name: Run server
        run: |
          docker load < terminusdb-server-docker-image.tar.gz
          docker run --detach --publish 6363:6363 $DOCKER_IMAGE_NAME:local

      - name: Set up Node.js
        uses: actions/setup-node@v2

      - name: Run integration tests
        run: |
          pwd
          ls -l
          cd tests
          npm install
          npm test

  # Begin deployment only for push events and certain refs.
  #
  # This is an empty job that serves as a common dependency for downstream jobs
  # in their `needs`.
  begin_deploy:
    runs-on: ubuntu-latest
    needs: [unit_tests, integration_tests]
    if: |
      github.repository == 'terminusdb/terminusdb' &&
      github.event_name == 'push' && (
        github.ref == 'refs/heads/main' ||
        github.ref == 'refs/heads/canary' ||
        github.ref == 'refs/heads/rc' ||
        github.ref == 'refs/heads/stable' ||
        startsWith(github.ref, 'refs/tags/v')
      )

    steps:
      - name: Begin deploy
        run: |
          echo "Deploying for:"
          echo "  event: ${{ github.event_name }}"
          echo "  ref:   ${{ github.ref }}"

  # Push Docker image to container repository.
  push_docker:
    runs-on: ubuntu-latest
    needs: begin_deploy

    steps:
      - name: Download Docker image
        uses: actions/download-artifact@v2
        with:
          name: terminusdb-server-docker-image

      - name: Push image to Docker Container Registry
        run: |
          echo '${{ secrets.DOCKER_PASS }}' | docker login -u terminusdb --password-stdin

          IMAGE_ID=$DOCKER_IMAGE_NAME
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "stable" ] && VERSION=latest
          [ "$VERSION" == "main" ] && VERSION=dev

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          docker load < terminusdb-server-docker-image.tar.gz
          docker tag $DOCKER_IMAGE_NAME:local $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION

  fedora_bin:
    runs-on: ubuntu-latest
    needs: begin_deploy

    steps:
      - uses: actions/checkout@v2
      - run: git clone --single-branch --branch "$TUS_VERSION" 'https://github.com/terminusdb/tus.git'
      - run: sudo docker run --name=fedora -v $(pwd)/tus:/usr/share/swi-prolog/pack/tus -v $(pwd):/app/terminusdb ghcr.io/terminusdb/terminus_store_prolog/terminus_store_prolog_fedora:latest bash -c "cd /app/terminusdb && make bin"
      - run: sudo docker cp fedora:/app/terminusdb/terminusdb fedora-bin
      - name: Upload rpm Artifact
        uses: actions/upload-artifact@v2
        with:
            name: terminusdb-fedora-bin
            path: fedora-bin

  deb_and_rpm:
    runs-on: ubuntu-latest
    needs: [appimage, fedora_bin]

    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2

    - uses: actions/download-artifact@v2
      with:
        name: TerminusDB-amd64.AppImage

    - run: mv *.AppImage terminusdb && chmod +x terminusdb

    - uses: actions/download-artifact@v2
      with:
        name: terminusdb-fedora-bin

    - run: sudo apt install rpm && sudo gem install --no-document fpm

    - run: make deb

    - name: Upload deb Artifact
      uses: actions/upload-artifact@v2
      with:
        name: terminusdb-deb
        path: terminusdb*.deb

    - name: Rename fedora bin and give executable permissions
      run: mv fedora-bin terminusdb && chmod +x terminusdb

    - run: make rpm

    - name: Upload rpm Artifact
      uses: actions/upload-artifact@v2
      with:
        name: terminusdb-rpm
        path: terminusdb*.rpm

    - name: Upload to JFrog repository
      run: |
          BRANCH=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          VERSION=$(grep 'VERSION=' Makefile | sed 's/VERSION=//g')
          GIT_HASH=$(git rev-parse --short "$GITHUB_SHA")
          DEB_DISTRIBUTIONS="deb.distribution=buster;deb.distribution=bullseye;deb.distribution=groovy;deb.distribution=focal;deb.distribution=bionic"

          if [ $(echo "${{ github.ref }}" | grep "tag") ]; then
            curl -T terminusdb*.deb -u "robin@terminusdb.com:${{ secrets.JFROG_ACCESS_TOKEN }}" -XPUT "https://terminusdb.jfrog.io/artifactory/terminusdb-deb/pool/terminusdb_${VERSION}_amd64.deb;$DEB_DISTRIBUTIONS;deb.component=main;deb.architecture=amd64"
          fi
          # Upload to dev/canary/rc/production repo
          if [ $(echo "$BRANCH" | grep -P "main|canary|rc") ]; then
            [[ "$BRANCH" == "main" ]] && BRANCH="dev" # If branch is main, use dev deb
            curl -T terminusdb*.deb -u "robin@terminusdb.com:${{ secrets.JFROG_ACCESS_TOKEN }}" -XPUT "https://terminusdb.jfrog.io/artifactory/terminusdb-deb-$BRANCH/pool/terminusdb_${VERSION}_amd64;$DEB_DISTRIBUTIONS;deb.component=main;deb.architecture=amd64"
          fi

  appimage:
    runs-on: ubuntu-18.04
    needs: begin_deploy

    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2

    # Runs a single command using the runners shell
    - name: rust-toolchain
      uses: actions-rs/toolchain@v1.0.6
      with:
        toolchain: stable

    # Runs a set of commands using the runners shell
    - name: Run a multi-line script
      run: |
        sudo apt-add-repository ppa:swi-prolog/stable -y
        sudo apt-get update -y
        sudo apt-get install swi-prolog-nox libpcre3 -y

    - name: Create appimage
      run: |
        cd distribution/appimage
        wget https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
        chmod +x linuxdeploy-x86_64.AppImage
        ./build_script.sh "$TERMINUSDB_STORE_PROLOG_VERSION" "$TUS_VERSION"
        mv "TerminusDB-$(echo $GITHUB_SHA | cut -c 1-7)-x86_64.AppImage" TerminusDB-amd64.AppImage

    - name: Run AppImage tests
      run: cd distribution/appimage && chmod +x TerminusDB-amd64.AppImage && ./TerminusDB-amd64.AppImage test

    - name: Archive production artifacts
      uses: actions/upload-artifact@v2
      with:
        name: TerminusDB-amd64.AppImage
        path: distribution/appimage/TerminusDB-amd64.AppImage

  deploy:
    runs-on: ubuntu-latest
    needs: [push_docker, deb_and_rpm]
    if: |
      github.repository == 'terminusdb/terminusdb' &&
      github.event_name == 'push' && (
        github.ref == 'refs/heads/canary' ||
        github.ref == 'refs/heads/rc' ||
        startsWith(github.ref, 'refs/tags/v')
      )

    steps:
    - uses: actions/checkout@v2

    - uses: actions/download-artifact@v2

    - name: Set release name
      id: release_name
      run: |
        SUFFIX=""
        if echo "$GITHUB_REF" | grep -P "canary|rc" ; then SUFFIX="-tag"; fi
        TAG=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
        TAG_WITH_SUFFIX="$TAG$SUFFIX"
        echo "::set-output name=tag::$TAG_WITH_SUFFIX"

    - name: Delete tag and release
      uses: dev-drprasad/delete-tag-and-release@v0.1.2
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.release_name.outputs.tag }}
      continue-on-error: true

    - name: Create a Release
      id: create_release
      uses: softprops/action-gh-release@v1
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.release_name.outputs.tag }}
        prerelease: ${{ !contains(github.ref, 'tags') }}
        files: |
          TerminusDB-amd64.AppImage/TerminusDB-amd64.AppImage
          terminusdb-deb/terminusdb*.deb
          terminusdb-rpm/terminusdb*.rpm
